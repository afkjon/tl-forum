import { GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import { useUser } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
dayjs.extend(relativeTime);

import { api } from "~/utils/api";

type SinglePostPageProps = {
  id: string;
}

const SinglePostPage: NextPage<SinglePostPageProps> = ({ id }: SinglePostPageProps) => {
  const { data, isLoading } = api.posts.get.useQuery({ id: id });
  const { data: commentsData } = api.comments.getCommentsForPostId.useQuery({ postId: id });

  if (!data) {
    return <div>Post not found</div>;
  }

  const date = dayjs(data?.post.createdAt).fromNow();

  return (
    <>
      <Head>
        <title>{data?.post.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen justify-center bg-gradient-to-b from-[#1c0433] to-[#15162c]">
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          <CreateCommentWizard postId={id} />
          <div className="flex border-b border-slate-400 p-4">
            {isLoading ? <div>Loading...</div> :
              <>
                <div>
                  <h1>{data?.post.title}</h1>
                  <div>{date}</div>
                  <div>Submitted by {data?.author.username}</div>
                  <p>{data?.post.content}</p>
                </div>
              </>
            }
          </div>
          {
            commentsData ?
              commentsData.map((comment) => (
                <CommentView {...comment} key={comment.comment.id} />
              ))
              : <div>No comments</div>
          }
        </div>
      </main>
    </>
  );
};

export default SinglePostPage;

import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import superjson from "superjson";
import { CreateCommentWizard } from "~/components/CreateCommentWizard";
import { CommentView } from "~/components/commentview";


export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson,
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") throw new Error("Slug is not a string");

  await ssg.posts.get.prefetch({ id: slug });

  return {
    props: {
      id: slug,
      trpcState: ssg.dehydrate(),
    }
  };
}

export const getStaticPaths = async () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
